package giolandia;

import java.util.ArrayList;
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;

public class Main {

	public static void main(String[] args) {
	
		grafo grafolandia = new grafo();
		int[] station = new int[21];
		Scanner teclado = new Scanner(System.in);
		int destino, partida, u, y, t, aux, m, sum, cont, bald;
		
		grafolandia.addconexao(grafolandia.station[1], grafolandia.station[2], grafolandia.line[6]);
		grafolandia.addconexao(grafolandia.station[2], grafolandia.station[3], grafolandia.line[7]);
		grafolandia.addconexao(grafolandia.station[3], grafolandia.station[4], grafolandia.line[8]);
		grafolandia.addconexao(grafolandia.station[4], grafolandia.station[5], grafolandia.line[9]);
		grafolandia.addconexao(grafolandia.station[5], grafolandia.station[6], grafolandia.line[10]);
		grafolandia.addconexao(grafolandia.station[7], grafolandia.station[8], grafolandia.line[16]);
		grafolandia.addconexao(grafolandia.station[8], grafolandia.station[9], grafolandia.line[17]);
		grafolandia.addconexao(grafolandia.station[9], grafolandia.station[10], grafolandia.line[18]);
		grafolandia.addconexao(grafolandia.station[10], grafolandia.station[11], grafolandia.line[19]);
		grafolandia.addconexao(grafolandia.station[11], grafolandia.station[6], grafolandia.line[20]);
		grafolandia.addconexao(grafolandia.station[12], grafolandia.station[8], grafolandia.line[0]);
		grafolandia.addconexao(grafolandia.station[8], grafolandia.station[2], grafolandia.line[1]);
		grafolandia.addconexao(grafolandia.station[2], grafolandia.station[15], grafolandia.line[2]);
		grafolandia.addconexao(grafolandia.station[15], grafolandia.station[16], grafolandia.line[3]);
		grafolandia.addconexao(grafolandia.station[16], grafolandia.station[17], grafolandia.line[4]);
		grafolandia.addconexao(grafolandia.station[17], grafolandia.station[18], grafolandia.line[5]);
		grafolandia.addconexao(grafolandia.station[12], grafolandia.station[9], grafolandia.line[21]);
		grafolandia.addconexao(grafolandia.station[9], grafolandia.station[13], grafolandia.line[22]);
		grafolandia.addconexao(grafolandia.station[13], grafolandia.station[14], grafolandia.line[23]);
		grafolandia.addconexao(grafolandia.station[14], grafolandia.station[5], grafolandia.line[24]);
		grafolandia.addconexao(grafolandia.station[5], grafolandia.station[17], grafolandia.line[25]);
		grafolandia.addconexao(grafolandia.station[10], grafolandia.station[13], grafolandia.line[11]);
		grafolandia.addconexao(grafolandia.station[13], grafolandia.station[3], grafolandia.line[12]);
		grafolandia.addconexao(grafolandia.station[3], grafolandia.station[16], grafolandia.line[13]);
		grafolandia.addconexao(grafolandia.station[16], grafolandia.station[19], grafolandia.line[14]);
		grafolandia.addconexao(grafolandia.station[19], grafolandia.station[20], grafolandia.line[15]);
		
		
		
		
		
		
		System.out.println("***Bem-vindo ao SMG***");
		do{
		do{
		System.out.print("digite seu destino: ");
		destino = teclado.nextInt();
		if(destino > 20 || destino < 1){
			System.out.println("so existem estaçoes de 1 a 20");
		}
		}while(destino > 21 || destino < 0);
		do{
		System.out.print("digite sua origem: ");
		partida = teclado.nextInt();
		if(destino > 20 || destino < 1){
			System.out.println("so existem estaçoes de 1 a 20");
		}
		}while(destino > 20 || destino < 1);
		grafolandia.inicializar();
		grafolandia.getStation(partida).setArranjoD((double) 0);
		
		
		while(existeAberto(grafolandia)){
			u = menorDist(grafolandia);
			grafolandia.getStation(u).setAberto(false);
			t = 0;
			y =0;
			while(t != 21){
				
				if(grafolandia.getConexao(grafolandia.getStation(u).getId(), y).getDistacia() != -1){
					relaxa(grafolandia.getStation(u), grafolandia.getStation(y), grafolandia);
				}
				y++;
				t++;
			}
		}
		m=0;
		aux = grafolandia.getStation(destino).getId();
		while(partida != grafolandia.getStation(aux).getId()){
		station[m]= grafolandia.getStation(aux).getId();
		m++;
		aux = grafolandia.getStation(aux).getAnt().getId();
		}
		sum =  (int)grafolandia.getStation(destino).getArranjoD();
		aux = partida;
		inverte(station , 0, station.length -1 );
		 for (int i=0; i<station.length - 1; i++){
			 if(station[i] != 0){
				 System.out.print(" pegue linha " + grafolandia.getConexao(aux, station[i]).getCor() + " para estacao " + station[i]);
				 aux = station[i];
			 }
			 
		 }
			 
		 
		 System.out.print(" pegue linha " + grafolandia.getConexao(aux, grafolandia.getStation(destino).getId()).getCor() + " para estacao " + grafolandia.getStation(destino).getId() + " ");
		
		System.out.println("vc vai levar " + sum + " minutos para chegar") ;
	
		
	
			System.out.println("DESEJA CONTINUAR SIM=1 | NAO=0 ");
			cont = teclado.nextInt();
			System.out.println();
		}while(cont != 0);

	}
	
	static void relaxa(Estacao station1, Estacao station2, grafo grafolandia){
		if(grafolandia.getConexao(station1.getId(), station2.getId()).getDistacia() != -1){
		if (station2.getArranjoD() > station1.getArranjoD() + grafolandia.getConexao(station1.getId(), station2.getId()).getDistacia()) {
			station2.setArranjoD(station1.getArranjoD() + grafolandia.getConexao(station1.getId(), station2.getId()).getDistacia());
			station2.setAnt(station1);
		}
		}
	}
	
	static boolean existeAberto(grafo grafolandia){

		for (int i = 0; i < 21; i++) {
			if(grafolandia.getStation(i).isAberto()){
				return true;
			}
		}
		return false;
	}
	
	static int menorDist(grafo grafolandia){
		int i;
		for (i = 0; i < 21; i++) {
			if (grafolandia.getStation(i).isAberto()) {
				break;
			}
		}
		if(i == 21){
			return -1;
		}
		int menor = i;
		for(i = menor + 1; i <21; i++){
			if(grafolandia.getStation(i).isAberto() && grafolandia.getStation(menor).getArranjoD() > grafolandia.getStation(i).getArranjoD()){
				menor = i;
			}
		}
			
		
		return menor;
	}

	static int[] inverte( int[] v, int i, int f ){
        int aux;
        if ( i >= f ){
            return v;
        }
        else{
            aux = v[i];
            v[i] = v[f];
            v[f] = aux;
            return inverte(v, i+1, f-1);
        }
	}
}
